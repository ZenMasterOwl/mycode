
# This was not original code - I followed a tutorial on tensorflow using Colaboratory





# -*- coding: utf-8 -*-
"""titanic_tensorflow_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V7I6EL3JzsuysY5MaIWlh-CDSEIRCdKJ

## This is a heading
"""

!pip install -q sklearn

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib

import tensorflow.compat.v2.feature_column as fc

import tensorflow as tf

"""## Data set"""

dftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv') #data for training the machine
dfeval = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv')  #data for testing how well the machine learned (different data to rule out memorization)

print(dftrain.head()) # shows us first five rows by default
y_train = dftrain.pop('survived')
y_eval = dfeval.pop('survived')
print(dftrain.head())
print(dftrain.loc[0], y_train.loc[0]) #pandas printing trick to print selected columns

dftrain.describe()

dftrain.shape

dftrain.age.hist(bins=20) # creates a histogram on age - notice data is skewed for people in mid 20s

dftrain.sex.value_counts().plot(kind='barh')

pd.concat([dftrain, y_train], axis=1).groupby('sex').survived.mean().plot(kind='barh').set_xlabel('% survived')

"""It was good to get a look at the dataset to see what kinds of values we will be working with.
- Majority of passengers are male
- Majority of passengers were in their mid-twenties
- Majority of survivors were female
"""

dfeval.shape # how many entries in eval

CATEGORICAL_COLUMNS = ['sex','n_siblings_spouses','parch','class','deck'] # we will have to convert this to numeric values for modeling
NUMERIC_COLUMNS = ['age','fare'] # good to go numerical values

feature_columns = [] # 
for feature_name in CATEGORICAL_COLUMNS:
  vocabulary = dftrain[feature_name].unique() 
  feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))

for feature_name in NUMERIC_COLUMNS:
  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))

print(feature_columns)

"""Now the training process, feeding it information from the dataset. 
Loading in batches (good practice for handling memory limits)

epoch is how many times a model is going to see the same data

start with lower number of epochs and raise the number gradually to avoid overfeeding
"""

def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):
  def input_function():
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))
    if shuffle:
      ds = ds.shuffle(1000)
    ds = ds.batch(batch_size).repeat(num_epochs)
    return ds
  return input_function

train_input_fn = make_input_fn(dftrain, y_train)
eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)

"""## Creating and training the model. 1:45"""

linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns) # This IS the model, okay? okay..

linear_est.train(train_input_fn) # train the model using the training function we built earlier
result = linear_est.evaluate(eval_input_fn) # evaluate the model to see how well it did

clear_output()
print(result['accuracy'])
print(result)

"""## Making predictions for every single point in the data set. 
Tensor flow is better at predictions of groups rather than single points.
"""

result = list(linear_est.predict(eval_input_fn)) 
#can change index values to compare predictions to actual outcomes and the details of the individual
print(dfeval.loc[2])
print("Actual survival outcome:", y_eval.loc[2])
print("Predicted chance of survival:", result[2]['probabilities'][1])
